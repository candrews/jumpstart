---
stages:
  - lint
  - build
  - test

codespell:
  stage: lint
  # A codespell docker image would be better: https://github.com/codespell-project/codespell/issues/1892
  image: python:3.11@sha256:91778894494195bc996601622cfc2e545852061c0b756ef4bafe87506fadcc61
  script:
    - |
      # shellcheck shell=sh
    - pip3 install codespell
    - codespell --version
    - codespell

yamllint:
  stage: lint
  image: registry.gitlab.com/pipeline-components/yamllint:0.23.0@sha256:f986e39d30b26a4a8865547c4733886a157b0aa7349f80333fea853c33bcb047
  script:
    - |
      # shellcheck shell=sh
      yamllint -s .

shellcheck:
  # See: https://candrews.integralblue.com/2022/02/shellcheck-scripts-embedded-in-gitlab-ci-yaml/
  stage: lint
  image: alpine:3.17.1@sha256:f271e74b17ced29b915d351685fd4644785c6d1559dd1f2d4189a5e851ef753a
  before_script:
    - |
      # shellcheck shell=sh
    - apk update
    - apk add --no-cache git yq shellcheck
  script:
    - |
      # shellcheck shell=sh
      git ls-files --exclude='*.sh' --ignored -c -z | xargs -0r shellcheck -x
      newline="$(printf '\nq')"
      newline=${newline%q}
      git ls-files --exclude='*.gitlab-ci.yml' --ignored -c | while IFS= read -r file; do
        yq eval '.[] | select(tag=="!!map") | (.before_script,.script,.after_script) | select(. != null ) | path | ".[\"" + join("\"].[\"") + "\"]"' "${file}" | while IFS= read -r selector; do
          script=$(yq eval "${selector} | join(\"${newline}\")" "${file}")
          if ! printf '%s' "${script}" | shellcheck -; then
              >&2 printf "\nError in %s in the script specified in %s:\n%s\n" "${file}" "${selector}" "${script}"
              exit 1
          fi
        done
      done

build and test:
  # the build job actually builds and tests
  stage: build
  services:
    - name: docker:23.0.1-dind@sha256:45b980f6ec6e4ec7e2dd66bbe23a1fb2b5b2562514434498394315c1b5de2264
      alias: docker
      # explicitly disable tls to avoid docker startup interruption as of docker 20.10.9
      # there is so security concern because docker is only accessed from within the same system;
      # there is no external network communication to worry about.
      # See https://github.com/testcontainers/testcontainers-java/pull/4573
      command: ["--tls=false"]
  variables:
    # Instruct Testcontainers to use the daemon of DinD.
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
  image: eclipse-temurin:17.0.6_10-jdk@sha256:e7f447f9e5b66ba99e6d29c0a3cf74742215cf28f93a94e6638f796d1d0320ea
  before_script:
    - |
      # shellcheck shell=sh
      GRADLE_USER_HOME="$(pwd)/.gradle"
      export GRADLE_USER_HOME
  script:
    - |
      # shellcheck shell=sh
      # gradle's build task will build, assemble, and test the project.
      # -Pno-testcontainers removes testcontainer runtime dependencies that are useful for developers.
      # These aren't used in production because real services (ex, a database) on a real server area used instead.
      # Note that bootBuildImage builds the image, but it's not pushed anywhere.
      # In the real world, you would push it somewhere using the --publishImage argument to bootBuildImage.
      ./gradlew build bootBuildImage -Pno-testcontainers
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull-push
    paths:
      - .gradle/wrapper
      - .gradle/caches
      - .gradle/nodejs
      - frontend/node_modules
  artifacts:
    when: always
    paths:
      - build/libs/*
      - build/reports/*
    reports:
      junit: [build/reports/**/TEST-*.xml, build/reports/cypress/results-*.xml]
  coverage: '/Total \d+(\.\d+)?\%/'

convert jacaco to cobertura coverage:
  # gitlab doesn't support jacoco format: https://gitlab.com/gitlab-org/gitlab/-/issues/227345
  # so convert from jacoco to cobertura: https://docs.gitlab.com/ee/user/project/merge_requests/test_coverage_visualization.html
  stage: test
  image: haynes/jacoco2cobertura:1.0.9@sha256:690ab3ff5d7ef7c1f1596b0c7c7e84b9684947fcea168565b1ebaf7974e87f24
  script:
    - |
      # shellcheck shell=sh
      # convert report from jacoco to cobertura
      python /opt/cover2cover.py build/reports/jacoco/test/jacocoTestReport.xml src/main/java > build/reports/coverage.xml
      # read the <source></source> tag and prepend the path to every filename attribute
      python /opt/source2filename.py build/reports/coverage.xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/reports/coverage.xml
