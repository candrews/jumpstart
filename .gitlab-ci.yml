---
stages:
  - lint
  - build
  - test

codespell:
  stage: lint
  image:
    name: ghcr.io/codespell-project/actions-codespell/stable:v2@sha256:3728259d3c5a08ff68bdfa1edbdd92b18523e05961948fc99d41d2c2db166ab0
    entrypoint: [""]
  script:
    - |
      # shellcheck shell=sh
    - codespell --version
    - codespell

yamllint:
  stage: lint
  image: registry.gitlab.com/pipeline-components/yamllint:0.26.0@sha256:4375c923e5664f78eb01d7e73c6959d2a009eec3f29fccaff236ee42125e241b
  script:
    - |
      # shellcheck shell=sh
      yamllint -s .

shellcheck:
  # See: https://candrews.integralblue.com/2022/02/shellcheck-scripts-embedded-in-gitlab-ci-yaml/
  stage: lint
  image: alpine:3.18.2@sha256:82d1e9d7ed48a7523bdebc18cf6290bdb97b82302a8a9c27d4fe885949ea94d1
  before_script:
    - |
      # shellcheck shell=sh
    - apk update
    - apk add --no-cache git yq shellcheck
  script:
    - |
      # shellcheck shell=sh
      git ls-files --exclude='*.sh' --ignored -c -z | xargs -0r shellcheck -x
      newline="$(printf '\nq')"
      newline=${newline%q}
      git ls-files --exclude='*.gitlab-ci.yml' --ignored -c | while IFS= read -r file; do
        yq eval '.[] | select(tag=="!!map") | (.before_script,.script,.after_script) | select(. != null ) | path | ".[\"" + join("\"].[\"") + "\"]"' "${file}" | while IFS= read -r selector; do
          script=$(yq eval "${selector} | join(\"${newline}\")" "${file}")
          if ! printf '%s' "${script}" | shellcheck -; then
              >&2 printf "\nError in %s in the script specified in %s:\n%s\n" "${file}" "${selector}" "${script}"
              exit 1
          fi
        done
      done

checkov:
  stage: lint
  image:
    name: bridgecrew/checkov:2.3.293@sha256:0552faea0fd4f75ef59d37789d632003d62ad4433ba8fa7c576d1b231bf96a24
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  script:
    - |
      # shellcheck shell=sh
      checkov \
        --quiet \
        --directory . \
        --output cli \
        --output junitxml \
        --output-file-path console,checkov.test.xml
  artifacts:
    when: always
    reports:
      junit: "checkov.test.xml"
    paths:
      - "checkov.test.xml"

build and test:
  # the build job actually builds and tests
  stage: build
  services:
    - name: docker:24.0.2-dind@sha256:28c6ddb5d7bfdc019fb39cc2797351a6e3e81458ad621808e5e9dd3e41538c77
      alias: docker
      # explicitly disable tls to avoid docker startup interruption as of docker 20.10.9
      # there is so security concern because docker is only accessed from within the same system;
      # there is no external network communication to worry about.
      # See https://github.com/testcontainers/testcontainers-java/pull/4573
      command: ["--tls=false"]
  variables:
    # Instruct Testcontainers to use the daemon of DinD.
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    IMAGE_NAME: "${CI_REGISTRY_IMAGE}"
    DOCKER_USERNAME: "${CI_REGISTRY_USER}"
    DOCKER_PASSWORD: "${CI_REGISTRY_PASSWORD}"
  image: eclipse-temurin:17.0.7_7-jdk@sha256:76651966efb71112c9b8baade76a17a77c569bb0e542bcdd4fe2008ab270f505
  before_script:
    - |
      # shellcheck shell=sh
      GRADLE_USER_HOME="$(pwd)/.gradle"
      export GRADLE_USER_HOME
  script:
    - |
      # shellcheck shell=sh
      # gradle's build task will build, assemble, and test the project.
      if [ "${CI_COMMIT_REF_NAME:-}" = "${CI_DEFAULT_BRANCH:-}" ]; then
        ./gradlew build bootBuildImage --imageName "${IMAGE_NAME}" --publishImage
      else
        ./gradlew build bootBuildImage --imageName "${IMAGE_NAME}"
      fi
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull-push
    paths:
      - .gradle/wrapper
      - .gradle/caches
      - .gradle/nodejs
      - frontend/node_modules
  artifacts:
    when: always
    paths:
      - build/libs/*
      - build/reports/*
    reports:
      junit: [build/reports/**/TEST-*.xml, build/reports/cypress/results-*.xml]
  coverage: '/Total \d+(\.\d+)?\%/'

convert jacaco to cobertura coverage:
  # gitlab doesn't support jacoco format: https://gitlab.com/gitlab-org/gitlab/-/issues/227345
  # so convert from jacoco to cobertura: https://docs.gitlab.com/ee/user/project/merge_requests/test_coverage_visualization.html
  stage: test
  image: haynes/jacoco2cobertura:1.0.9@sha256:690ab3ff5d7ef7c1f1596b0c7c7e84b9684947fcea168565b1ebaf7974e87f24
  script:
    - |
      # shellcheck shell=sh
      # convert report from jacoco to cobertura
      python /opt/cover2cover.py build/reports/jacoco/test/jacocoTestReport.xml src/main/java > build/reports/coverage.xml
      # read the <source></source> tag and prepend the path to every filename attribute
      python /opt/source2filename.py build/reports/coverage.xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/reports/coverage.xml
